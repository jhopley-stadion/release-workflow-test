name: Create Release

on:
  push:
    branches:
      - main  # Trigger on push to main

permissions:
  contents: write  # Allow the workflow to push tags, rebase, and create releases

jobs:
  create-release:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure rebase works correctly

      - name: Get latest version
        id: get_latest_version
        run: |
          # Fetch the latest tag from the releases
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "1.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Get branch type
        id: get_branch_type
        run: |
          # Extract branch name from the latest commit message
          branch_name=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH" | grep -oP 'Merge pull request #[0-9]+ from \K\S+')
          branch_name=$(echo "$branch_name" | sed 's/^[^/]*\///')
          # Determine the branch type based on the branch name
          if [[ "$branch_name" == release/* ]]; then
            branch_type="release"
          elif [[ "$branch_name" == hotfix/* ]]; then
            branch_type="hotfix"
          else
            echo "Branch does not match expected patterns"
            exit 1
          fi
          echo "branch_type=$branch_type" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"
          # Increment version based on branch type
          if [[ "${{ env.branch_type }}" == "release" ]]; then
            minor=$((minor + 1))  # Increment minor version for release
            new_tag="$major.$minor.0"
          elif [[ "${{ env.branch_type }}" == "hotfix" ]]; then
            patch=$((patch + 1))  # Increment patch version for hotfix
            new_tag="$major.$minor.$patch"
          else
            echo "Unknown branch type"
            exit 1
          fi
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # Draft the release notes using Release Drafter
      - name: Draft Release Notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: .github/release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create the new tag and GitHub release with auto-generated notes
      - name: Create Release
        run: |
          gh release create ${{ env.new_tag }} --title "Release ${{ env.new_tag }}" --target main --generate-notes


      - name: Rebase develop with main for hotfixes
        if: env.branch_type == 'hotfix'  # Only do this for hotfixes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin develop
          git checkout develop
          git rebase origin/main
          git push origin develop --force-with-lease  # Use --force-with-lease to safely force push