name: Create Release

on:
  push:
    branches:
      # Trigger on push to main
      - main  

permissions:
  # Allow the workflow to push tags and create releases
  contents: write  

jobs:
  create-release:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Get the latest release tag or use "1.0.0" if none exist
      - name: Get latest version
        id: get_latest_version
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "1.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      # Get the current branch type (release or hotfix)
      - name: Get branch type
        id: get_branch_type
        run: |
          branch_name=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH" | grep -oP 'Merge pull request #[0-9]+ from \K\S+')
          branch_name=$(echo "$branch_name" | sed 's/^[^/]*\///')

          # Identify if it's a release or hotfix branch
          if [[ "$branch_name" == release/* ]]; then
            branch_type="release"
          elif [[ "$branch_name" == hotfix/* ]]; then
            branch_type="hotfix"
          else
            echo "Branch does not match expected patterns"
            exit 1
          fi

          echo "branch_type=$branch_type" >> $GITHUB_ENV

      # Determine the next version based on the branch type
      - name: Increment version
        id: increment_version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"

          if [[ "${{ env.branch_type }}" == "release" ]]; then
            minor=$((minor + 1))  # Increment minor version for release
            new_tag="$major.$minor.0"
          elif [[ "${{ env.branch_type }}" == "hotfix" ]]; then
            patch=$((patch + 1))  # Increment patch version for hotfix
            new_tag="$major.$minor.$patch"
          else
            echo "Unknown branch type"
            exit 1
          fi

          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # Create the new tag and GitHub release
      - name: Tag the new version
        run: |
          gh release create ${{ env.new_tag }} --title "Release ${{ env.new_tag }}" --target main --notes ""

      # Generate release notes from commits since the last tag
      - name: Generate release notes
        id: generate_release_notes
        run: |
          release_notes=$(gh api repos/${{ github.repository }}/compare/${{ env.latest_tag }}...main --jq '.commits[].commit.message' | sed 's/^/* /')
          echo "${release_notes}" > release_notes.txt
          echo "release_notes_file=release_notes.txt" >> $GITHUB_ENV

      # Update GitHub Release with the generated notes
      - name: Update GitHub Release with Notes
        run: |
          release_notes=$(cat ${{ env.release_notes_file }})
          gh release edit ${{ env.new_tag }} --notes "$release_notes"
