name: Create Release

on:
  push:
    branches:
      - main  # Trigger on push to main

permissions:
  contents: write  # Allow the workflow to push tags, rebase, and create releases

jobs:
  create-release:
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      JIRA_URL: 'https://your-jira-instance.atlassian.net/browse/'  # Update this with your JIRA URL

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure rebase works correctly

      - name: Get latest version
        id: get_latest_version
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "1.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Get branch type
        id: get_branch_type
        run: |
          branch_name=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH" | grep -oP 'Merge pull request #[0-9]+ from \K\S+')
          branch_name=$(echo "$branch_name" | sed 's/^[^/]*\///')

          if [[ "$branch_name" == release/* ]]; then
            branch_type="release"
          elif [[ "$branch_name" == hotfix/* ]]; then
            branch_type="hotfix"
          else
            echo "Branch does not match expected patterns"
            exit 1
          fi

          echo "branch_type=$branch_type" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"

          if [[ "${{ env.branch_type }}" == "release" ]]; then
            minor=$((minor + 1))  # Increment minor version for release
            new_tag="$major.$minor.0"
          elif [[ "${{ env.branch_type }}" == "hotfix" ]]; then
            patch=$((patch + 1))  # Increment patch version for hotfix
            new_tag="$major.$minor.$patch"
          else
            echo "Unknown branch type"
            exit 1
          fi

          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Tag the new version
        run: |
          gh release create ${{ env.new_tag }} --title "Release ${{ env.new_tag }}" --target main --notes ""

      - name: Generate formatted release notes
        id: generate_release_notes
        run: |
          # Get commit messages since the last release
          raw_commit_messages=$(gh api repos/${{ github.repository }}/compare/${{ env.latest_tag }}...main --jq '.commits[].commit.message' || echo "No commits found")
          echo "Raw commit messages:"
          echo "$raw_commit_messages"
          
          # Add JIRA ticket links to commit messages
          jira_pattern='[A-Za-z0-9]+-[0-9]+'  # Adjusted JIRA ticket pattern
          jira_url="${{ env.JIRA_URL }}"

          # Replace JIRA ticket references with Markdown links
          release_notes=$(echo "$raw_commit_messages" | sed -E "s/($jira_pattern)/[\1]($jira_url\1)/g" | sed 's/^/* /')

          # Add a title to the release notes and ensure the formatting is correct
          formatted_notes="## Commit History Since Last Release\n\n$release_notes"

          # Ensure newlines are preserved and properly formatted for GitHub release notes
          formatted_notes=$(echo -e "$formatted_notes")

          echo "${formatted_notes}" > release_notes.txt
          echo "release_notes_file=release_notes.txt" >> $GITHUB_ENV

      - name: Update GitHub Release with Notes
        run: |
          release_notes=$(cat ${{ env.release_notes_file }})
          echo "Formatted release notes:"
          echo "$release_notes"
          gh release edit ${{ env.new_tag }} --notes "$release_notes"

      - name: Rebase develop with main for hotfixes
        if: env.branch_type == 'hotfix'  # Only do this for hotfixes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin develop
          git checkout develop
          git rebase origin/main
          git push origin develop --force-with-lease  # Use --force-with-lease to safely force push
