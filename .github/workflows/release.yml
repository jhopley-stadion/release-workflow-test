name: Create Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get latest version
        id: get_latest_version
        run: |
          echo "Fetching latest tag..."
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "1.0.0")
          echo "Latest tag is: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch type
        id: get_branch_type
        run: |
          echo "Extracting branch name from commit message..."
          branch_name=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH" | grep -oP 'Merge pull request #[0-9]+ from \K\S+')
          branch_name=$(echo "$branch_name" | sed 's/^[^/]*\///')
          echo "Branch name extracted: $branch_name"
          if [[ "$branch_name" == release/* ]]; then
            branch_type="release"
          elif [[ "$branch_name" == hotfix/* ]]; then
            branch_type="hotfix"
          else
            echo "Branch does not match expected patterns"
            exit 1
          fi
          echo "Branch type determined: $branch_type"
          echo "branch_type=$branch_type" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          echo "Incrementing version based on branch type..."
          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"
          echo "Current version: $major.$minor.$patch"
          if [[ "${{ env.branch_type }}" == "release" ]]; then
            minor=$((minor + 1))
            new_tag="$major.$minor.0"
          elif [[ "${{ env.branch_type }}" == "hotfix" ]]; then
            patch=$((patch + 1))
            new_tag="$major.$minor.$patch"
          else
            echo "Unknown branch type"
            exit 1
          fi
          echo "New tag calculated: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Draft Release Notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for Release Notes to be Drafted
        run: |
          echo "Waiting for release notes to be drafted..."
          sleep 30

      - name: Check if Release Exists and Retry if Needed
        id: check_release
        run: |
          echo "Checking if release exists..."
          for i in {1..5}; do
            release_info=$(gh release view ${{ env.new_tag }} --json tagName 2>/dev/null)
            if [[ -n "$release_info" ]]; then
              echo "Release found."
              break
            else
              echo "Release not found. Retrying in 10 seconds..."
              sleep 10
            fi
          done
          if [[ -z "$release_info" ]]; then
            echo "Error: Release not found after retries."
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        run: |
          echo "Creating release..."
          notes=$(gh release view ${{ env.new_tag }} --json body --jq '.body' 2>/dev/null || echo "No notes found")
          if [[ "$notes" == "No notes found" ]]; then
            echo "Warning: No release notes found. Creating release with default message."
            gh release create ${{ env.new_tag }} --title "Release ${{ env.new_tag }}" --target main --notes "Release notes are not available."
          else
            gh release create ${{ env.new_tag }} --title "Release ${{ env.new_tag }}" --target main --notes "$notes"
          fi
          echo "Release created: ${{ env.new_tag }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rebase develop with main for hotfixes
        if: env.branch_type == 'hotfix'
        run: |
          echo "Rebasing develop with main..."
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch origin develop
          git checkout develop
          git rebase origin/main
          git push origin develop --force-with-lease
          echo "Rebase complete and pushed"
