name: Create Release

on:
  push:
    branches:
      - main  # Trigger on push to main

permissions:
  contents: write  # Allow the workflow to push tags and create releases

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set GH_TOKEN to GITHUB_TOKEN for GitHub CLI authentication
      - name: Set up GitHub CLI authentication
        run: echo "GH_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV

      # Get the latest release tag or use "1.0.0" if none exist
      - name: Get latest version
        id: get_latest_version
        run: |
          latest_tag=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "1.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      # Get the source branch from the GitHub event context
      - name: Get source branch
        id: get_source_branch
        run: |
          branch_name=$(jq -r .head_commit.message < "$GITHUB_EVENT_PATH" | grep -oP 'Merge pull request #[0-9]+ from \K\S+')
          branch_name=$(echo "$branch_name" | sed 's/^[^/]*\///')
          echo "branch_name=$branch_name" >> $GITHUB_ENV

      # Determine the next version based on the branch name
      - name: Determine next version
        id: determine_version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.latest_tag }}"
          branch_name="${{ env.branch_name }}"

          if [[ "$branch_name" == release/v* ]]; then
            version=${branch_name#release/v}
            if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              new_tag=$version
            else
              echo "Invalid version format in branch name: $branch_name"
              exit 1
            fi
          elif [[ "$branch_name" == hotfix/* ]]; then
            minor=$((minor + 1))
            new_tag="$major.$minor.0"
          else
            echo "Branch does not match expected patterns"
            exit 1
          fi

          echo "new_tag=$new_tag" >> $GITHUB_ENV

      # Tag the new version and create a release
      - name: Tag the new version
        run: |
          gh release create ${{ env.new_tag }} --title "Release ${{ env.new_tag }}" --target main --notes ""

      # Generate release notes from commits since the last tag
      - name: Generate release notes
        id: generate_release_notes
        run: |
          release_notes=$(gh api repos/${{ github.repository }}/compare/${{ env.latest_tag }}...main --jq '.commits[].commit.message' | sed 's/^/* /')
          echo "${release_notes}" > release_notes.txt
          echo "release_notes_file=release_notes.txt" >> $GITHUB_ENV

      # Update GitHub Release with the generated notes
      - name: Update GitHub Release with Notes
        run: |
          release_notes=$(cat ${{ env.release_notes_file }})
          gh release edit ${{ env.new_tag }} --notes "$release_notes"
